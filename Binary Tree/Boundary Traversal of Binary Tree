import java.util.* ;
import java.io.*; 
/************************************************************

    Following is the Binary Tree node structure:
    
   class TreeNode {
	    int data;
	    TreeNode left;
	    TreeNode right;

	    TreeNode(int data) {
		    this.data = data;
		    this.left = null;
		    this.right = null;
	    }

    }

************************************************************/

import java.util.ArrayList;

public class Solution {
	public static ArrayList<Integer> traverseBoundary(TreeNode root){
	 ArrayList<Integer> result = new ArrayList<>();

    if (root != null) {
        result.add(root.data);
        printLeftBoundary(root.left, result);
        printLeaves(root.left, result);
        printLeaves(root.right, result);
        printRightBoundary(root.right, result);
    }

    return result;
}

private static void printLeftBoundary(TreeNode node, List<Integer> result) {
    if (node == null || (node.left == null && node.right == null))
        return;

    result.add(node.data);   
if (node.left == null)
        printLeftBoundary(node.right, result);
    else
        printLeftBoundary(node.left, result);
}

private static void printRightBoundary(TreeNode node, List<Integer> result) {
    if (node == null || (node.right == null && node.left == null))
        return;

    if (node.right == null)
        printRightBoundary(node.left, result);
    else
        printRightBoundary(node.right, result);

    result.add(node.data);
}
private static void printLeaves(TreeNode node, List<Integer> result) {
    if (node == null)
        return;

    printLeaves(node.left, result);

    if (node.left == null && node.right == null)
        result.add(node.data);

    printLeaves(node.right, result);
}
}
	











