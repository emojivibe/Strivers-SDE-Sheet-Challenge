import java.util.*;
import java.util.ArrayList;

public class Solution 
{
    
        private static final int[] Row_NEIGH={-1,-1,-1,0,0,1,1,1};
        private static final int[] Col_NEIGH={-1,0,1,-1,1,-1,0,1};
    private static int n;
    private static int m;
    
    
    public static int getTotalIslands(int[][] mat) 
	{
    n=mat.length;
    m=mat[0].length;
    boolean[][] vis=new boolean[n][m];
    int isLandCnt=0;

    
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            if(!vis[i][j] && mat[i][j]==1){
                isLandCnt++;
                //ArrayList<String> vec= new ArrayList<>();
                dfs(mat,vis,i,j);
                //store it in hashset
                
            }
        }
    }
    return isLandCnt;
       //Your code goes here
    }
private static void dfs(int[][] mat, boolean[][] vis, int row,int col){
    //mark the call as visited
    vis[row][col]=true;
    //coordinates- base-coordinates

    //traverse all 4 neighbours
    for(int i=0;i<8;i++){
        int nrow=row+Row_NEIGH[i];
        int ncol=col+Col_NEIGH[i];
        //check for valid unvisited land neighbour coordinates
        if(isValidCell(nrow, ncol) && mat[nrow][ncol]==1 && !vis[nrow][ncol]){
            dfs(mat,vis,nrow,ncol);
        }
    }


}
private static boolean isValidCell(int row,int col){
   return row>=0 && row<n && col>=0 && col<m;
}
}



