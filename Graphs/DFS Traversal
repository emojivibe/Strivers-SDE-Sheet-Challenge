import java.util.ArrayList;

public class Solution {
    public static ArrayList<ArrayList<Integer>> depthFirstSearch(int v, int e, ArrayList<ArrayList<Integer>> edges) {
    ArrayList<ArrayList<Integer>> adjList=new ArrayList<>();
    for(int i=0;i<v;i++){
        adjList.add(new ArrayList<>());
    }    // Write your code here.
    for(ArrayList<Integer> edge: edges){
        int u=edge.get(0);
        int w=edge.get(1);
        adjList.get(u).add(w);
        adjList.get(w).add(u);
    }
    boolean[] visited=new boolean[v];
    //arraylist to store dfs traversal
    ArrayList<ArrayList<Integer>> dfsTraversal=new ArrayList<>();
    
    for(int i=0;i<v;i++){
        if(!visited[i]){
            ArrayList<Integer> component=new ArrayList<>();
            dfsUtil(i,adjList,visited,component);
            dfsTraversal.add(component);
        }
    }
    return dfsTraversal;
    }
    private static void dfsUtil(int vertex,ArrayList<ArrayList<Integer>> adjList, boolean[] visited,ArrayList<Integer> component){
        visited[vertex]=true;
        component.add(vertex);
        for(int neighbour:adjList.get(vertex)){
            if(!visited[neighbour]){
                dfsUtil(neighbour,adjList,visited,component);
            }
        }
    }
}










