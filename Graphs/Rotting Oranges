import java.util.Queue;
import java.util.*;
public class Solution {

	public static int minTimeToRot(int[][] grid, int n, int m) {
	if(grid==null || grid.length==0)
	return 0;
	Queue<int[]> queue=new LinkedList<>();
	int cnt_Fresh=0;	
	for(int i=0;i<n;i++){
		for(int j=0;j<m;j++){
if(grid[i][j]==2){
	queue.offer(new int[]{i,j});
}
if(grid[i][j]!=0){
	cnt_Fresh++;
}
		}
	}	
	if(cnt_Fresh==0) return 0;
	int cntMin=0,cnt=0;
	int dx[]={0,0,1,-1};
	int dy[]={1,-1,0,0};
	//bfs starting from initially rotten oranges
	while(!queue.isEmpty()){
		int size=queue.size();
		cnt+=size;
		for(int i=0;i<size;i++){
			int[] pnt=queue.poll();
			for(int j=0;j<4;j++){
				int x=pnt[0]+dx[j];
				int y=pnt[1]+dy[j];
				if(x<0 || y<0 ||x>=n||y>=m|| grid[x][y]==0|| grid[x][y]==2) 
				continue;
				grid[x][y]=2;
				queue.offer(new int[]{x,y});
			}
		}
		if(queue.size()!=0){
			cntMin++;
		}
	}
	return cnt_Fresh==cnt? cntMin: -1; 
		// Write your code here.
	}

}
