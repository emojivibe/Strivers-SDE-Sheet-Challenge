import java.util.*;
import java.util.ArrayList;
public class Solution {
  private static boolean checkCycle(int node,ArrayList<ArrayList<Integer>> edges,int vis[]){
    vis[node]=1;
    
    for(Integer it: edges.get(node)){
      if(vis[it]==0){
        if(checkCycle(it, edges, vis)){
          return true;
        }
      }else if(vis[it]==1){
        return true;
      }
    }
    vis[node]=2;
    return false;
  }
  public static boolean detectCycleInDirectedGraph(int n, ArrayList < ArrayList < Integer >> edges) {
   ArrayList<ArrayList<Integer>> adjacencyList=new ArrayList<>(n+1);
for(int i=0;i<=n;i++){
  adjacencyList.add(new ArrayList<>());

}
for(ArrayList<Integer> edge:edges){
  int from=edge.get(0);
  int to=edge.get(1);
  adjacencyList.get(from).add(to);
}
int[] vis=new int[n+1];
for(int i=1;i<=n;i++)
{
  if(vis[i]==0 && checkCycle(i,adjacencyList,vis)){
    return true;
  }
}  
return false;//// Write your code here.
  }
}
